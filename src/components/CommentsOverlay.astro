---
---
<div id="comments-overlay" class="overlay">
  <div class="modal">
    <span class="close-button">&times;</span>
    <h2>Guestbook</h2>

    <form id="comment-form" class="comment-form">
      <h3>Leave a comment</h3>
      <input type="text" id="comment-name" placeholder="Your Name" required maxlength="50">
      <div class="textarea-wrapper">
        <textarea id="comment-message" placeholder="Your comment..." required maxlength="80" rows="4"></textarea>
        <div id="char-counter" class="char-counter">80 / 80</div>
      </div>
      <button type="submit">Send</button>
    </form>

    <div class="comments-list">
      <h3>Comments</h3>
      <div id="comments-container">
        <p>Loading comments...</p>
      </div>
    </div>
  </div>
</div>

<script>
  import { initializeApp } from "firebase/app";
  import { getFirestore, collection, addDoc, query, onSnapshot, serverTimestamp, orderBy } from "firebase/firestore";
  import { getAuth, signInAnonymously, onAuthStateChanged } from "firebase/auth";

  const firebaseConfig = {
    apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
    authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
  };
  
  const canvasConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
  const effectiveConfig = firebaseConfig.projectId ? firebaseConfig : canvasConfig;
  const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

  let db, auth;

  try {
    const app = initializeApp(effectiveConfig);
    db = getFirestore(app);
    auth = getAuth(app);
  } catch (e) {
    console.error("Firebase initialization failed:", e);
    const commentsContainer = document.getElementById('comments-container');
    if (commentsContainer) {
        commentsContainer.innerHTML = '<p>Could not connect to the database.</p>';
    }
  }

  function renderComments(comments) {
    const commentsContainer = document.getElementById('comments-container');
    if (!commentsContainer) return;

    if (comments.length === 0) {
      commentsContainer.innerHTML = '<p>No messages yet. Be the first!</p>';
      return;
    }

commentsContainer.innerHTML = comments.map(comment => {
      const name = escapeHTML(comment.name) || 'Anonymous';

      return `
        <div class="comment">
          <p class="comment-text">
            <strong class="comment-author">${name}:</strong> ${escapeHTML(comment.message)}
          </p>
        </div>
      `;
    }).join('');
  }
  
  function escapeHTML(str) {
      const p = document.createElement('p');
      p.appendChild(document.createTextNode(str || ''));
      return p.innerHTML;
  }

  if (auth) {
      signInAnonymously(auth).catch((error) => {
          console.error("Anonymous sign-in failed:", error);
      });

      onAuthStateChanged(auth, (user) => {
          if (user && db) {
              const commentsCollection = collection(db, `artifacts/${appId}/public/data/comments`);
              const q = query(commentsCollection, orderBy('timestamp', 'desc'));

              onSnapshot(q, (snapshot) => {
                  const comments = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                  renderComments(comments);
              }, (error) => {
                  console.error("Error fetching comments:", error);
                  const commentsContainer = document.getElementById('comments-container');
                  if (commentsContainer) {
                      commentsContainer.innerHTML = '<p>Could not load comments.</p>';
                  }
              });
          }
      });
  }

  const commentForm = document.getElementById('comment-form');
  if (commentForm) {
      commentForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          if (!auth.currentUser || !db) {
              alert("Not connected to the database. Please try again.");
              return;
          }
          
          const nameInput = document.getElementById('comment-name');
          const messageInput = document.getElementById('comment-message');

          const name = nameInput.value.trim();
          const message = messageInput.value.trim();

          if (name && message) {
              try {
                  await addDoc(collection(db, `artifacts/${appId}/public/data/comments`), {
                      name: name,
                      message: message,
                      timestamp: serverTimestamp()
                  });
                  nameInput.value = '';
                  messageInput.value = '';
              } catch (error) {
                  console.error("Error adding comment: ", error);
                  alert("Could not send message. Please try again.");
              }
          }
      });
  }

  const messageInput = document.getElementById('comment-message');
  const charCounter = document.getElementById('char-counter');
  if (messageInput && charCounter) {
    const maxLength = messageInput.getAttribute('maxlength');
    charCounter.textContent = `${maxLength} / ${maxLength}`;
    messageInput.addEventListener('input', () => {
      const remaining = maxLength - messageInput.value.length;
      charCounter.textContent = `${remaining} / ${maxLength}`;
    });
  }
</script>

<style>
  .overlay {
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    display: flex; justify-content: center; align-items: center;
    opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease;
    z-index: 1000;
  }
  .overlay.active { opacity: 1; visibility: visible; }

  .modal {
    background-color: #212529; padding: 30px; border-radius: 15px;
    max-width: 700px; width: 90%; max-height: 80vh;
    overflow-y: auto; position: relative;
    box-shadow: 0 5px 25px rgba(0, 0, 0, 0.5);
    transform: scale(0.9); transition: transform 0.3s ease;
  }
  .overlay.active .modal { transform: scale(1); }
  .modal .close-button {
    position: absolute; top: 10px; right: 20px;
    font-size: 2.5em; color: #fff; line-height: 1;
    cursor: pointer;
  }
  .modal h2 { text-align: center; margin-top: 0; font-size: 2em; }

  .comment-form {
    display: flex; flex-direction: column; gap: 15px;
    margin-bottom: 40px;
  }
  .comment-form h3 { margin: 0 0 5px 0; text-align: left; font-size: 1.2em; }
  .comment-form input, .comment-form textarea {
    width: 100%; resize: vertical; padding: 12px;
    border-radius: 8px; border: 1px solid #4a4a4c;
    background-color: #1c1c1e; color: #fff;
    font-family: "Roboto", sans-serif; font-size: 1em;
    box-sizing: border-box;
  }
  .textarea-wrapper {
    position: relative;
  }
  .char-counter {
    position: absolute;
    bottom: 8px;
    right: 12px;
    font-size: 0.8em;
    color: #a7a7a7;
  }
  .comment-form button {
    align-self: flex-start; padding: 10px 20px;
    border: none; border-radius: 8px;
    background-color: #3498db; color: white;
    font-weight: bold; cursor: pointer;
    transition: background-color 0.2s;
  }
  .comment-form button:hover { background-color: #2980b9; }

  .comments-list h3 {
    text-align: left;
    padding-bottom: 10px; margin-bottom: 20px;
    font-size: 1.2em;
    border-bottom: 1px solid #4a4a4c;
  }
  .comment {
    display: flex;            
    align-items: flex-start;   
    gap: 10px; 
    text-align: left;
    background-color: #2c2c2e;
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 10px;
    border: 1px solid #4a4a4c;
  }
  .comment:last-child {
    border-bottom: 1px solid #4a4a4c;
    margin-bottom: 0;
    padding-bottom: 15px;
  }
  .comment-author {
    color: #3498db !important;
    font-weight: bold;
    flex-shrink: 0; 
    margin: 0;             
  }
  .comment-text {
    margin: 0;
    white-space: pre-wrap;
    word-wrap: break-word;
    font-size: 1em;
    line-height: 1.5;
  }
</style>

